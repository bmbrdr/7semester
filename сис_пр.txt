Системное программирование  ДИ-13-21, Улашева Ш, Абраев А
Операционная система – это___________:
====
 Назначение
====
 Пользование
====
 Сервисная программа
====
#  менеджер ресурсов компьютера
++++
 Операционные системы являются ресурсами ___________ компьютера:
====
#  Управления
====
 обеспечение
====
 назначение
====
 пользование
++++
 Операционные системы для программирования приложений Win32API:
====
 Linux
====
 Unix
====
#  windows ХР
====
 MS DOS++++
 Категории объектов ОС Windows приложении:
====
 Windows 98
====
 User
====
#  unix
====
 Windows Shell
++++
 Ресурсы принадлежащие каждому потоку в ОС Windows:
====
 потоки интерфейса пользователя
====
 библиотека общих элементов
====
 интерфейс пользователя
====
#  Стек для работы приложения
++++
 Действия менеджера потоков, во время переключения процессора на исполнение другого потока:
====
 обслуживает очередь запускаемого потока
====
#  Сохранить контекст прерываемого потока
====
 обеспечивает функции для вывода графики
====
 обеспечивает функции для взаймодействия
++++
 Параметры функции CreateThread:
====
 TerminateThread
====
#  ipThreadAttributes
====
 AttachThreadInput
====
 CreateProcess
++++
 Функции работы с процессами и потоками в Win32 API:
====
 ExitThread
====
#  createThread
====
 DwStackSize
====
 lpStrtAddress
++++
 Функция Sleep()___________:
====
 освобождает память
====
#  Делает короткие паузы
====
 завершает выполнение функций
====
 освобождает ресурсы
++++
 Классификация программ в зависимости от количества определяемых ими параллельных потоков управления:
====
 дуплексный
====
 многозадачный
====
#  Многопоточный
====
 системный
++++
 Операции над потоком связанные с операционной системой:
====
 Create
====
#  run
====
 Read
====
 Write
++++
 Ресурсы каждого процесса ОС Windows:
====
 стек для работы приложения
====
#  Страницы в реальной памяти
====
 стек для работы ОС
====
 консольный ввод
++++
 Объектам синхронизации первого класса в Windows, которые служат только для решения задач синхронизации параллельных потоков:
====
#  Мьютекс (mutex)
====
 процесс (process)
====
 поток (thread)
====
 консольный ввод (console input).
++++
 К третьему классу синхронизации относятся объекты, которые переходят
в сигнальное состояние по завершении своей работы:
====
 мьютекс (mutex)
====
#  Поток (thread)
====
 семафор (semaphore)
====
 консольный ввод (console input)
++++
 Системные объекты, созданные менеджером объектов в Win32 API:
====
 класс
====
 поток
====
#  Семафор
====
 приоритет потока
++++
 Логические комбинации флагов параметра dwDesiredAccess:
====
#  EVENT_ALL_ACCESS_
====
 SEMAPHORE _MODIFY_STATE
====
 ACTIONS_BEFORE_EVENT
====
 CREATE_NEW_CONSOLE
++++
 Логические комбинации флагов параметра dwDesiredAccess, определяющий доступ к семафору:
====
 ACTIONS_AFTER_EVENT
====
#  SEMAPHORE _MODIFY_STATE_
====
 ACTIONS_BEFORE_EVENT
====
 CREATE_NEW_CONSOLE
++++
 Значение функции WaitForsingieObject, в случае успешного завершения:
====
 wait_object_р
====
 wait_forsingie
====
#  Wait_object_o
====
 wait_object
++++
 Прототип функции waitForMuitipieObject:
====
#  DWORD_nCount
====
 LPOVERLAPPED lpOverLapped
====
 HANDLE hThread
====
 DWORD IDThread
++++
 Значения функции waitForMuitipieobjects:
====
#  ОТ WAIT_OBJECT_0 ДО (WAIT_OBJECT_0 + nCount ====
 1).
====
 ОТ WAIT_OBJECT_0 ДО (WAIT_OBJECT_0 );
====
 ОТ WAIT_OBJECT_0 ДО (WAIT_OBJECT_0 + nCount);
====
 ОТ WAIT_ABANDONED_0 ДО (WAIT_ABANDONED_0);
++++
 Состояние блока адресов в адресном пространстве:
====
#  Выделен
====
 защищен
====
 копирован
====
 прикреплен
++++
 Интерфейсы (API) для управления памятью:
====
 Base Services
====
 Common Control Library
====
#  virtual Memory
====
 Network Services
++++
 Куча – это___________:
====
 объекты памяти
====
 страница памяти
====
#  Динамическая область памяти
====
 указатель блока памяти
++++
 Функции для управления памятью кучи:
====
 HeapSize()
====
#  heapFree()
====
 HeapCreate()
====
 MapViewOfFile()
++++
 Форматы реального и виртуального адресов:
====
#  Номер реальной страницы
====
 номер фактической страницы
====
 номер оперативной памяти
====
 номер динамической страницы
++++
 Форматы реального и виртуального адресов:
====
 a
====
#  r
====
 e
====
 k
++++
 Описание линейного адреса процесса в ОС Windows:
====
 4 Гбайт виртуальной памяти
====
 2 Гбайт виртуальной памяти
====
#  4 Гбайт логической памяти
====
 от 0х00000000 до 0х0000FFFF
++++
 Состояние страницы процесса виртуальной памяти:
====
 (блокирован)
====
 (выделен)
====
#  free (свободный);
====
 (не выделен)
++++
 Функция файловой системы:
====
 совместно использовать объект файла
====
#  Открытие доступа к существующему файлу
====
 выделят мелкие фрагменты файла
====
 разбиение диска на разделы
++++
 Структура и описание каталога:
====
#  Древовидная
====
 кольцевая
====
 выпуклая
====
 плоская
++++
 Имена каталогов и файлов не должны содержат:
====
 +
====
#  <
====
 !
====
 .
++++
 Параметр dwDesiredAccess задает способ доступа к файлу и принимает значения:
====
#  0
====
 FILE_SHARE_WRITE
====
 FILE_SHARE_READ
====
 TRUNCATE_EXISTING
++++
 Значения параметра dwCreationDisposition при открытии файла:
====
 0
====
 FILE_SHARE_WRITE
====
 FILE_SHARE_READ
====
#  TRUNCATE_EXISTING_
++++
 Правильная запись имени файла:
====
#  “C:\\demo_file.dat”
====
 “C:\\demo_file.dоt”
====
 “C:\\demo\file.dat”
====
 “C\\demo_file.dat”
++++
 Значение функций GetFileType:
====
 FILE_SHARE_WRITE
====
 FILE_SHARE_READ
====
 GENERIC_READ
====
#  FILE_TYPE_DISK_
++++
 Значения параметра функции CopyFile:
====
#  IpExistingFileName.
====
 lpThreadAttributes;
====
 AttachThreadInput;
====
 TerminateThread;
++++
 Верхние уровни, составляющие основу структуры реестра Windows:
====
 HKEY_LOCAL
====
 HKEY_LOCAL_WORD
====
#  HKEY_LOCAL_MACHINE
====
#  HKEY_CURRENT_USER
++++
 API функции, применяемые для выполнения операций с реестром:
====
 RegReserverds
====
#  RegCloseKey
====
 RegClass
====
 RegSubKeys
++++
 API функции применяемые в среде Windows NT:
====
 RegQueryValue()
====
#  RegSetKeySecurity( )
====
 RegCloseKey()
====
 RegFlushKey()
++++
 HKey идентифицирует текущий раздел или предопределенные дескрипторы:
====
 HKEY_LOCAL_MACHINE
====
 HKEY_LOCAL_WORD
====
#  HKEY_CLASSES_ROOT_
====
 HKEY_CURRENT_ MACHINE
++++
 Параметры функции WriteFile:
====
 nNumberOfBytes
====
 lpNewFileName
====
 bFailIfExists
====
#  nNumberOfBytesToWrite
++++
 Системный вызов для файла:
====
 stat()
====
 lstat()
====
#  fchown( )
====
 read()
++++
 Метаданные файла связанные со временем:
====
 st_blocks
====
 st_dev
====
#  st_ctime
====
 st_uid
++++
 Функции для перемещения файла:
====
 lpNewFileName
====
#  replaceFile
====
 readFile
====
 delete_File
++++
 Механизм отображения файлов в память:
====
#  Отображение содержимого файла
====
 создать файловое пространство
====
 открыть файл приложения
====
 создать файл загрузки
++++
 Параметры функции CreateFileMapping (создание объекта отображающий файл в память):
====
 lpBuffer
====
 numberOfByte
====
 completionKey
====
#  flProtects
++++
 Значения параметра flProtect :
====
#  PAGE_READ
====
 PAGE_READONLY
====
 PAGE_WRITEONLY
====
 PAGE_COPYONLY
++++
 Прототип функции MapViewOfFile:
====
#  HANDLE hFileMappingObject
====
 LPOVERLAPPED lpOverLapped
====
 HANDLE hThread
====
 DWORD IDThread
++++
 Прототип функции MapViewOfFileЕх, отображающий файл в адресное пространства с некоторого заданного виртуального адреса:
====
#  HANDLE hFileMappingObject
====
 LPOVERLAPPED lpOverLapped
====
 HANDLE hThread
====
 DWORD IDThread
++++
 Механизм отображения файлов в память:
====
 узнать какой поток ее вызывает
====
#  Файл отображен несколькими процессами
====
 хранить указатели на захваченную память
====
 запускать приложение
++++
 Функции файла stdio.h языка программирования С, создающие стандартную библиотеку ввода====
вывода:
====
 stdout— файл ввода
====
 stlib —файлы библиотеки
====
#  stdin — Стандартный файл ввода
====
 tanh —математикалыќ шамаларды шыєаратын файл
++++
 Прототип функции DllMain:
====
#  HINSTANCE
====
 HANDLE
====
 DWORD
====
 LPCSTR
++++
 Параметр fdwReason может иметь одно из следующих значений, которое
указывает на причину, по которой операционная система вызывает
функцию DllMain:
====
 dont_resolve_dll_references
====
 load_library_as_datafile
====
 load_with_altered_search_path
====
#  dll_process_attach_
++++
 Прототип функции LoadLibraryEx, для загрузки динамически подключаемых библиотек:
====
 LPCTSTR
====
#  LPVOID
====
 HMODULER
====
 LPCSTR
++++
 Значения параметра dwFiags, задающий флаги управления загрузкой модуля:
====
#  dont_resolve_Dll_references
====
 dll_process_detach
====
 case dll_process_attach
====
 dwPrewTlsIndex= dwFirstTlsIndex
++++
 Действия необходимые для статической загрузки DLL:
====
 создать файл
====
#  Моместить библиотеку и файл в каталог
====
 хранить указатели на захваченную память
====
 запускать приложение
++++
 Задачи динамической локальной памяти потока:
====
 создать DLL
====
 поместить библиотеку в каталог
====
#  Хранить указатели на захваченную память
====
 поместить файл импорта этой библиотеки в каталог
++++
 Порядок работы с локальной памятью потока:
====
#  Освобождение указателя
====
 завершение функции
====
 возвращает значение
====
 запись значения
++++
 Динамические подключаемые библиотеки предназначены___________:
====
 для завершения нового потока в процессе
====
 для сохранения файла и каталога
====
#  Для уменьшения физической памяти
====
 для перехода в адресную строку
++++
 Функция для работы локальной памятью потока:
====
#  TlsAlloc
====
 ReadFiles
====
 NumberOfBytes
====
 lpAttributes
++++
 Параметры функции CreateFileMapping (создание объекта отображающий файл в память):
====
 lpBuffer
====
 numberOfBytes
====
 completionKey
====
#  flprotect
++++
 Распределение локальной памяти потока в DLL:
====
#  break
====
 return 0;
====
 dDll=LoadLibrary;
====
 returnGetLastError();
++++
 Статическая локальная память:
====
 принимает записи
====
 содержит очередь пакетов
====
 обслуживает очередь пакетов
====
#  Создает отдельный переменной
++++
 Значения аргумента dwCreationDisposition для создания файла:
====
 CREATE_FILE
====
 CREATE_THREAD
====
 CREATE_NEW
====
#  OPEN
++++
 Параметры функции для асинхронной записи данных в файл WriteFileEx:
====
#  lpbuffer
====
 numberOfBytes
====
 completionKey
====
 devceIoControl
++++
 Прототип функции UnlockFileEx для асинхронной отмены блокировки области файла:
====
 BOOL bResume
====
#  LPOVERLAPPED lpOverLapped
====
 HANDLE hThread
====
 DWORD IDThread
++++
 Функции, инициирующие посылку пакетов в порт завершения ввода====
вывода:
====
 CreateIoCompletionPort
====
 NumberOfBytes
====
 CompletionKey
====
#  DevceIocontrol
++++
 Функции, инициирующие посылку пакетов в порт завершения ввода====
вывода:
====
 CreateIoCompletionPort
====
#  NumberOfBytes
====
 CompletionKey
====
 ConnectNamedPipe
++++
 Порт завершения ввода====
вывода:
====
 принимает записи
====
#  Содержит очередь пакетов
====
 обслуживает очередь пакетов
====
 создает параллельные потоки
++++
 Параметры процедуры ввода====
вывода:
====
 lpBuffer
====
#  dwErrorCode
====
 lpCompletionRoutine
====
 dwError
++++
 Механизм структурной обработки исключений:
====
 не допускается использование функций GetExeptionCode
====
 не допускается использование оператора throw
====
#  допускается использование функций GetExeptionInformation
====
 не допускается использование функций GetExeptionInformation
++++
 Заголовок файла об обработке исключений:
====
 string.h
====
#  windows.h
====
 stdio.h
====
 lm.h
++++
 Прототип обработки исключений с плавающей точкой:
====
 unsigned typedef void
====
#  unsigned int _controlfp()
====
 _se_translator_function
====
 void se_trans_func
++++
 Блок исключений:
====
#  _finally
====
 _exception
====
 _handle
====
 _function
++++
 Блок исключений:
====
#  _leave
====
 _exception
====
 _handle
====
 _function
++++
 Параметры функции RaiseException:
====
#  lparguments
====
 hReadPipe
====
 write_File
====
 delete_File
++++
 Значения параметра new для управления исключениями:
====
 _EM_BYZERO
====
 _EM_FLOAT
====
 _EM_WORD
====
#  _EM_ZERODIVIDE
++++
 Функция====
транслятор___________:
====
 завершает выполнение блока
====
 начинает раскрутку стека
====
#  описывается в заголовочном файле eh.h
====
 использует функцию _leave
++++
 Элементы безопасности объектов Win32:
====
 создает маркер доступа
====
#  Поддержка защищенных каналов
====
 разрешает доступ к каналу
====
 создает аудит доступа к объекту
++++
 Функции интеллектуальных карточек:
====
 создает аудит доступа к объекту
====
 изменяет информацию безопасности
====
 встроенная поддержка функций АРI
====
#  Хранение информации о человеке
++++
 Режимы доступа к объектам:
====
 WR
====
#  WC;
====
 RW
====
 CW
++++
 Модели управления в дискреционной модели безопасности:
====
 доступное управление
====
#  Централизованное управление
====
 серверное управление
====
 древовидное управление
++++
 Основные функции списка управления доступами:
====
#  Создается владельцем объекта
====
 создается сервером
====
 запрещает доступ к объекту
====
 создается операционной системой
++++
 Идентификатор безопасности (Security Identifier):
====
 хранится в логической памяти
====
 представляет учетную запись
====
#  Бинарное представление учетной записи
====
 создает учетную запись
++++
 Символы обозначающие идентификатор безопасности:
====
 A
====
#  S
====
 L
====
 M
++++
 Дескрипторы безопасности, известные на платформах Windows:
====
 R ====
1====
5====
1
====
#  S====
1====
5====
1
====
 R ====
1====
5====
5
====
 S ====
1====
5====
17
++++
 Главное отличие привилегий от прав доступа ___________:
====
#  привилегии назначаются по умолчанию в операционных Fсистемах Windows
====
 привилегии касаются охраняемых объектов системы
====
 привилегии назначаются субъектам администратором системы
====
 права доступа выполнить некоторое действие по отношению объектам системы
++++
 Информация сохраненная в маркере доступа:
====
 SID учетной записи пользователя
====
#  идентификатор безопасности текущей сессии (logon session)
====
 каждое сообщение содержит информацию о субъекте
====
 статистическая информация о маркере доступа
++++
 Уровни безопасности потока====
сервера для обработки запросов потока====
клиента:
====
#  Security Anonymous level
====
 Security Account Manager
====
 Security Accounts Database
====
 Security_Attributes
++++
 Уровни безопасности потока====
сервера для обработки запросов потока====
клиента:
====
 ObjectType
====
#  Object_Deleted
====
 Object Inherit
====
 pObjectName
++++
 Виды связей между процессами====
отправителями и адресатами:
====
 между собой связаны три процесса
====
 между собой связаны только два процесса
====
 между собой связаны четыре процесса
====
#  один процесс связан с N====
1 процессами
++++
 Топология связей между процессами:
====
 между собой связаны три процесса
====
 между собой связаны четыре процесса
====
 Между собой связаны только два процесса
====
#  один процесс связан с N====
1 процессами
++++
 Тип вместимости связи между процессами (буферизации):
====
 ограниченная связь
====
 открытый тип вместимости связи
====
#  нулевая вместимость связи
====
 открытая вместимость связи
++++
 Размер значения именованного канала, посылающий сообщение к серверу:
====
#  нулевая вместимость связь
====
 каждый из процессов связан с одним процессами
====
 первичный вместимость связи
====
 закрытая вместимость связи
++++
 Анонимные каналы:
====
#  передают данные потоком
====
 не передает данные
====
 устанавливают связи
====
 доступны
++++
 Функции соединения клиентов анонимными каналами:
====
 CreatePipe
====
#  DuplicateHandle
====
 WriteFile
====
 hWritePipe
++++
 Способы передачи наследуемого дескриптора процессу====
клиенту анонимного канала:
====
 основе wm_copydata
====
 с помощью сервер
====
 через канал
====
#  посредством сообщения wm_copydata
++++
 Функции описанные в файле stdio.h, обеспечивают ввод====
вывод в стандартные файлы:
====
 printf
====
#  stdin
====
 scanf
====
 stdopen
++++
 Прототип именованных каналов:
====
 stdin
====
#  dwOpenMode
====
 scanf
====
 stdout
++++
 Флаги, для определения направления передачи данных:
====
#  pipe_access_duplex
====
 pipe_name
====
 nOutBufferSize
====
 nDefaultTimeOut++++
 Выберите из предложенного списка, что может являться критерием эффективности вычислительной системы:
====
# пропускная способность
====
занятость оперативной памяти
====
загруженность центрального процессора
====
занятость временной памяти
++++
 Системы пакетной обработки предназначены для решения задач:
====
# вычислительный характер
====
требующих постоянного диалога с пользователями
====
занятость оперативной памяти
====
требующих решения конкретной задачи за определенный промежуток времени
++++
 В каких системах гарантируется выполнение задания за определенный промежуток времени:
====
пакетной обработки
====
разделения времени
====
занятость оперативной памяти
====
# системах реального времен
++++
 В системах пакетной обработки суммарное время выполнения смеси задач:
====
# равно сумме времен выполнения всех задач смес
====
меньше или равно суммы времен выполнения всех задач смеси
====
больше или равно суммы времен выполнения всех задач смеси
====
занятость оперативной памяти
++++
 В системах реального времени
====
набор задач неизвестен заранее
====
занятость оперативной памяти
====
набор задач известен заранее
====
# известен или нет набор задач зависит от характера системы
++++
 Самое неэффективное использование ресурсов вычислительной системы:
====
# системах пакетной обработки
====
в занятость оперативной памяти
====
в системах разделения времени
====
в системах реального времени
++++
 В многопоточных системах поток есть –
====
заявка на ресурсы
====
занятость оперативной памяти
====
заявка на ресурс ЦП
====
# в заявка на ресурс ОП
++++
 Потоки создаются с целью:
====
# ускорения работы процесса
====
защиты областей памяти
====
занятость оперативной памяти
====
улучшения межпроцессного взаимодействии++++
 Как с точки зрения экономии ресурсов лучше распараллелить работу:
====
создать несколько процессов
====
создать несколько потоков
====
занятость оперативной памяти
====
# оба равнозначны, можно выбирать любой из них
++++
 Планирование потоков игнорирует:
====
приоритет потока
====
занятость оперативной памяти
====
время ожидания в очереди
====
# принадлежность некоторому процессу
++++
 В каких системах тип планирования статический
====
реального времени
====
разделения времени
====
занятость оперативной памяти
====
# пакетная обработка
++++
 Состояние, которое не определено для потока в системе:
====
выполнение
====
синхронизация
====
ожидание
====
# готовность
++++
 Каких смен состояний не существует в системе:
====
# выполнение → готовность
====
ожидание →выполнение
====
ожидание → готовносте
====
готовность → ожидание
++++
 Какой из алгоритмов планирования является централизованным:
====
вытесняющий
====
памятный
====
возможный
====
# невытесняющие
++++
 При каком кванте времени в системах, использующих алгоритм квантования, время ожидания потока в очереди не зависит от длительности ее выполнения:
====
при маленьком кванте времени
====
занятость оперативной памяти
====
при длительном кванте времени
====
# при любом кванте времен
++++
 Приоритет процесса не зависит от:
====
того, является ли процесс системным или прикладным
====
# статуса пользователя
====
требуемых процессом ресурсов
====
занятость оперативной памяти
++++
 В каких пределах может изменяться приоритет потока в системе Windows NT:
====
от базового приоритета процесса до нижней границы диапазона приоритета потоков реального времени
====
от нуля до базового приоритета процесса
====
занятость оперативной памяти
====
# базовый приоритет процесса ± 2
++++
 Каких классов прерываний нет?
====
аппаратных
====
асинхронных
====
внутренних
====
# программный
++++
 Какие из прерываний можно считать синхронными?
====
внешние
====
# внутренный
====
программные
====
динамические
++++
 Память с самой высокой стоимостью единицы хранения:
====
дисковая память
====
оперативная память
====
занятость оперативной память
====
# регистры процессора
++++
 Какая функция ОС по управления оперативной памятью характерна только для мультизадачных ОС:
====
выделение памяти по запросу
====
освобождение памяти по завершению процесса
====
занятость оперативной памяти
====
# защита память
++++
 Какая стратегия управления памятью определяет, какие конкретно данные необходимо загружать в память:
====
# выборки
====
размещения
====
замещения
====
загрузка
++++
 Виртуальные адреса являются результатом работы:
====
пользователя
====
# транслятор
====
компоновщика
====
ассемблера
++++
 Какого типа адреса могут быть одинаковыми в разных процессах:
====
# виртуальный
====
физические
====
реальные
====
сегментные
++++
 Недостатки распределения памяти фиксированными разделами:
====
сложность реализации
====
сложность защиты
====
# ограничение на число одновременно выполняющихся процессов
====
фрагментация памяти
++++
 Какой процесс обязательно должен выполняться в системе памяти с перемещаемыми разделами:
====
сжатие
====
перемещение
====
занятость оперативной памяти
====
# свопинг
++++
 Что из ниже перечисленного верно для свопинга:
====
на диск выгружается неиспользуемая в настоящий момент часть процесса
====
на диск выгружаются неиспользуемые процессом данные
====
на занятость оперативной памяти
====
# диск выгружается не активный процесс++++
 Таблица страниц используется для:
====
# преобразования виртуального адреса в физический
====
для ускорения работы процесса
====
для реализации свопинга
====
для занятости оперативной памяти
++++
 Объем страницы:
====
выбирается по возможности максимальный
====
в занятость оперативной памяти
====
выбирается минимальным
====
# для процессоров х86 стандартно равен 4 кбайта
++++
 Кэширование – это:
====
способ функционирования дисковых устройств
====
способ работы с ОП
====
занятость оперативной памяти
====
# способ взаимного функционирования двух типов запоминающих устройств
++++
 Что может выступать в качестве кэша для ОП:
====
# дисковые устройства
====
быстродействующая статическая память
====
виртуальная память
====
занятость оперативной памяти
++++
 Атаки класса «отказ в обслуживании» направлены на:
====
# полный или частичный вывод ОС из строя
====
вывод из строя аппаратуры ПК
====
занятость оперативной памяти
====
полное или частичное удаление установленного ПО
++++
 Какой вид многозадачности не существует?
====
Вытесняющая многозадачность
====
# кооперативная (не вытесняющая) многозадачность
====
Занятость оперативной памяти
====
Симметричная многозадачность
++++
 Существуют ли классификация ядер ОС по особенностям выполнения ядра в многопроцессорных системах? (учитывая, что такие системы ядром поддерживаются)
====
да
====
# нет
====
Возможно
====
Нереально
++++
 Где должен располагаться код для обнаружения оборудования? (учитывая современные устройства)
====
# В ядре (или обязательных модулях, серверах для немонолитных архитектур)
====
Вне ядра, в драйверах
====
Не занятость оперативной памяти
====
Занятость оперативной памяти
++++
 Какое ядро современных ОС поддерживает Multiboot Specification?
====
# Windows
====
SunOS 82
====
MacOS
====
Все ядра BSD
++++
 Что означает аббревиатура PIC в контексте ОС?
====
Programmable Interrupt Code
====
Past Implemented Code
====
Position Independent Code
====
# Portable Incompatible Code Controller
++++
 Какие основные преимущества микроядерной архитектуры?
====
Упрощение переносимости
====
Улучшение безопасности
====
# Повышенные отказоустойчивость и степень структурированности
====
У Всех выше перечисленное
++++
 Предшественником какого современного семейства ОС была ОС Minix Эндрю Таненбаума?
====
BSD
====
Windows
====
СИЛК
====
# Linux
++++
 Нашли ли экзоядерные ОС широкое применение в современной вычислительной технике?
====
да
====
# нет
====
Возможно
====
Нереально
++++
 В какой из ОС впервые был реализован стек протоколов TCP/IP?
====
BSD
====
# Windows
====
Linux
====
DOS++++
 Выберите не подходящее утверждение об отношении DOS к первым версиям Windows?
====
# Windows можно было запускать приложения DOS
====
Занятость оперативной памяти
====
Многие функции делегировались соответствующим функциям DOS (то есть для этого производилось переключение режимов работы ЦПУ)
====
Поддержка приложений DOS была ограниченной и неполной (при эмуляции на VDM, в рамках режима V86)
++++
 В какой ОС поддержка графического интерфейса пользователя (GUI) интегрирована непосредственно в ядро?
====
# Windows
====
Оникс
====
BSD
====
Linux
++++
 Укажите типы сообщений, которые могут использоваться в микроядерных ОС
====
# Синхронные и асинхронные
====
Только синхронные
====
Паразиторные
====
Только асинхронные
++++
 В чём главный недостаток монолитных ядер?
====
# их нельзя модифицировать во время работы
====
Со временем они настолько разрастаются, что резко усложняется внесение каких====
либо изменений
====
Они занимают слишком много оперативной памяти
====
Невозможно
++++
 Укажите основное средство межпроцессного взаимодействия в микроядерных архитектурах
====
Потоки
====
# Удалённые вызовы процедур (RPC, Remote Procedure Call)
====
Сообщения
====
СМС
++++
 Какая нотация вызовов функций принята в системных вызовах Windows?
====
# Смесь нотаций языков C и Pascal (обратный порядок аргументов, очистка стека функцией)
====
Нотация языка Pascal (прямой порядок аргументов, очистка стека функцией)
====
Нотационные знаки
====
Нотация языка C (обратный порядок аргументов, очистка стека вызывающим кодом)
++++
 Достаточно ли установки антивирусного пакета для того, чтобы считать ОС защищенной:
====
# да
====
нет
====
Возможно
====
зависит от конкретных условий работы
++++
 Для обеспечения безопасности системы должны использоваться средства, которые при отказе переходят в состояние:
====
максимальная защита
====
# минимальной защиты
====
средняя защита
====
нормальная защита
++++
 При организации защиты в системе необходимо руководствоваться принципом:
====
# максимальной защиты
====
минимальная защита
====
без баланса
====
баланса возможного ущерба от угрозы и затрат на ее предотвращениа
++++
 Слабости парольной защиты:
====
# трудность распознавания
====
возможность раскрытия пароля путем подбора
====
возможность обхода парольной защиты
====
в занятости оперативной памяти
++++
 Процесс авторизации – это процесс
====
ввода пользователем учетной информации
====
доказательства того, что пользователь тот, за кого себя выдает
====
занятость оперативной памяти
====
# выполнения действий, необходимых для того, чтобы пользователь мог начать работу в системе
++++
 В асимметричных системах шифрования:
====
ключ шифрования совпадает с ключом расшифрования
====
# занятость оперативной памяти
====
ключ шифрования отличается от ключа расшифрования
====
ключи генерируются случайным образом
++++
 Правила разграничения доступа не должны позволять:
====
присутствия ничейных объектов в системе
====
# занятость оперативной памяти
====
присутствия объектов, недоступных для администраторов системы
====
присутствия всем доступных объектов
++++
 Файловая система является частью:
====
дисковых систем
====
драйверов дисков
====
# ОС
====
пользовательских программ++++
 Какую структуру образуют файлы в ФС (файловой системе) FAT?
====
древовидную
====
# сетевой
====
реляционную
====
плоскую
++++
 Определите, какое это имя файла: USER\DO\FEDYA DOC:
====
# полной
====
простое
====
относительное
====
конечные
++++
 Одна ФС в системах Windows занимает, как правило:
====
1 физического диска
====
1 логического диска
====
# 1 раздел диск
====
1 логика
++++
 В ФС FAT атрибуты файлов хранятся
====
# вместе с файлом
====
в каталогах
====
в индексных дескрипторах
====
в таблицах FAT
++++
 Диски – это память:
====
# последовательным доступом
====
с индексно====
последовательным доступом
====
с прямым доступом
====
с левым
++++
 Какой разметки нет на диске?
====
дорожков
====
# кластер
====
цилиндров
====
секторов
++++
 Минимальная единица, участвующая в операциях обмена с дисковым устройством:
====
байт
====
сектор
====
# дорожка
====
цилиндр
++++
 Размер логического диска:
====
# меньше или равен размеру раздел
====
равен размеру раздела
====
больше или равен размеру раздела
====
занятость оперативной памята
++++
 ОС Windows поддерживают следующие типы разделов:
====
# основная
====
базовый
====
подкачкой
====
дополнительный
++++
 Раздел, с которого загружается ОС при запуске компьютера называется:
====
загрузочным
====
основным
====
дополнительным
====
# активная
++++
 Минимальный фактический размер файла на диске равен:
====
1 биту
====
1 байту
====
1 сектору
====
# 1 кластер
++++
 На диске не может быть кластера размером:
====
# 512 байта
====
1024 байт
====
1536 байт
====
2048 байт
++++
 Числовое значение –12, 16, 32 – в ФС FAT отражает:
====
размер кластера на диске
====
дополнительный
====
# разрядность элемента в таблице FAT
====
допустимое количество символов в имени файла
++++
 Максимальный размер диска, поддерживаемого FAT16:
====
практически неограничен
====
1024 кбит
====
512 Мбайт
====
# 2 Гбайта
++++
 Недостатки ФС FAT:
====
# сложность реализации
====
не поддерживают разграничения доступа к файлам и каталогам
====
не поддерживают длинных имен файлов
====
не содержат средств поддержки отказоустойчивости
++++
 Какие функции выполняет операционная система?
====
обеспечение организации и хранения файлов
====
занятость оперативной памяти
====
# организация диалога с пользователем, управления аппаратурой и ресурсами компьютера
====
все выше перечисленные
++++
 Где находится BIOS?
====
на оперативно====
запоминающем устройстве (ОЗУ)
====
на винчестере
====
на CD====
ROM
====
# в постоянно====
запоминающем устройстве (ПЗУ)
++++
 Папка, в которую временно попадают удалённые объекты, называется
====
# Корзина
====
Оперативной
====
Портфель
====
Блокнот
++++
 Текущий диск ====
 это
====
# диск, с которым пользователь работает в данный момент времени
====
CD====
ROM
====
жесткий диск
====
диск, в котором хранится операционная система
++++
 ОС Windows поддерживает длинные имена файлов Длинным именем файла считается
====
любое имя файла без ограничения на количество символов в имени файла
====
любое имя файла латинскими буквами, не превыщающее 255 символов
====
# занятость оперативной памяти
====
любое имя файла, не превышающее 255 символов
++++
 Внутренние команды ====
 это
====
команды, предназначенные для создания файлов и каталогов
====
занятость оперативной памяти
====
# команды, встроенные в DOS
====
команды, которые имеют расширения sys, exe, com
++++
 Загрузчик операционной системы MS DOS служит для
====
загрузки программ в оперативную память ЭВМ
====
обработки команд, введенных пользователем
====
# считывания в память модулей операционной системы io sys и msdos sys
====
подключения устройств ввода====
вывода
++++
 Какие команды DOS называются внешними?
====
команды, предназначенные только для работы с периферийными устройствами
====
занятость оперативной памяти
====
# команды, хранящиеся на диске в виде отдельных программа и вызываемые по мере необходимости
====
все команды, которые можно реализовать с помощью DOS
++++
 BIOS ====
 это
====
игровая программа
====
диалоговая оболочка
====
# базовая система ввода====
вывод
====
командный язык операционная система
++++
 Операционная система сети включает в себя управляющие и обслуживающие программы К управляющим относятся
====
Межпрограммный доступ
====
Доступ отдельных прикладных программ к ресурсам сети
====
Синхронизация работы прикладных программных средств
====
# Все выше перечисленные
++++
 Какой вид многозадачности не существует?
====
Вытесняющая многозадачность
====
Кооперативная (не вытесняющая) многозадачность
====
# симметричная многозадачность
====
Занятость оперативной памяти
++++
 Существуют ли классификация ядер ОС по особенностям выполнения ядра в многопроцессорных системах? (учитывая, что такие системы ядром поддерживаются)
====
да
====
# нет
====
Возможно
====
Невозможно
++++
 Где должен располагаться код для обнаружения оборудования? (учитывая современные устройства)
====
# Ядре (или обязательных модулях, серверах для немонолитных архитектур)
====
В не ядра, в драйверах
====
В памяти
====
В дисководе
++++
 Какое ядро современных ОС поддерживает Multiboot Specification?
====
# Windows
====
MacOS
====
Linux
====
Все ядра BSD
++++
 Что означает аббревиатура PIC в контексте ОС?
====
Programmable Interrupt Code
====
Past Implemented Code
====
# Position Independent Code Controller
====
Portable Incompatible Code
++++
 Какие основные преимущества микроядерной архитектуры?
====
Упрощение переносимости
====
Улучшение безопасности
====
# повышенные отказоустойчивость и степень структурированности
====
Все выше перечисленное
++++
 Предшественником какого современного семейства ОС была ОС Minix Эндрю Таненбаума?
====
BSD
====
Windows
====
# Linux
====
СМС
++++
 Нашли ли экзоядерные ОС широкое применение в современной вычислительной технике?
====
да
====
Возможно
====
Нереально
====
# нет
++++
 В какой из ОС впервые был реализован стек протоколов TCP/IP?
====
BSD
====
# Windows
====
Linux
====
DOS
++++
 Выберите не подходящее утверждение об отношении DOS к первым версиям Windows?
====
В Windows можно было запускать приложения DOS
====
Занятость оперативной памяти
====
Многие функции Windows делегировались соответствующим функциям DOS (то есть для этого производилось переключение режимов работы ЦПУ)
====
# поддержка приложений DOS была ограниченной и неполной (при эмуляции на VDM, в рамках режима V86)
++++
 В какой ОС поддержка графического интерфейса пользователя (GUI) интегрирована непосредственно в ядро?
====
# Windows
====
BSD
====
СМС
====
Linux
++++
 Укажите типы сообщений, которые могут использоваться в микроядерных ОС
====
# Синхронные и асинхронные
====
Параллельные
====
Только синхронные
====
Только асинхронные
++++
 В чём главный недостаток монолитных ядер?
====
Их нельзя модифицировать во время работы
====
Занятость оперативной памяти
====
# со временем они настолько разрастаются, что резко усложняется внесение каких====
либо изменений
====
Они занимают слишком много оперативной памяти
++++
 Укажите основное средство межпроцессного взаимодействия в микроядерных архитектурах
====
Потоки
====
Занятость оперативной памяти
====
Удалённые вызовы процедур (RPC, Remote Procedure Call)
====
# сообщения
++++
 Какая нотация вызовов функций принята в системных вызовах Windows?
====
# смесь нотаций языков C и Pascal (обратный порядок аргументов, очистка стека функцией)
====
Нотация языка Pascal (прямой порядок аргументов, очистка стека функцией)
====
Нотация языка C (обратный порядок аргументов, очистка стека вызывающим кодом)
====
Занятость оперативной памяти
++++
 Для выполнения каких операций оптимизирована серверная операционная система Novell NetWare?
====
доступ к файлам
====
# доступ к файлам и печать
====
почтовая служба
====
занятость оперативной памяти
++++
 Какие из этих ОС могут использоваться для построения одноранговых сетей?
====
NetWare
====
# Windows 95/98
====
занятость оперативной памяти
====
MS====
DOS
++++
 Какие задачи не выполняет ОС при обмене с периферийным устройством?
====
Решает, может ли быть выполнена требуемая операция обмена
====
Передает запрос драйверу ПУ
====
Занятость оперативной памяти
====
# принимает информацию из сети от устройства управления ПУ
++++
 Сколько выделенных серверов может одновременно работать в сети?
====
нет специальных ограничений
====
занятость оперативной памяти
====
# только один
====
по числу требуемых в сети служб — для каждой сетевой службы отдельный выделенный сервер
++++
 Пусть сеть состоит из идентичных компьютеров, на которых установлены однотипные ОС За одним из компьютеров административно закреплены функции по обслуживанию запросов остальных компьютеров(все пользователи сети хранят свои файлы на диске этого компьютера) К какому типу сети вы отнесете эту сеть?
====
Сеть с выделенным сервером
====
Занятость оперативной памяти
====
# одноранговая сеть
====
Гибридная сеть
